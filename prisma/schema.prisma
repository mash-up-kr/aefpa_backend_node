// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/api/server/generated"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(256)
  password      String?        @db.Char(60) // Bcrypt hash length
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userProfile   UserProfile?
  userCharacter UserCharacter?
  userCode      UserCode[]
  logs          Log[]
  scrapLogs     UserScrapLog[]
  goodLogs      UserGoodLog[]
  followedBy    Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
  detailLogs    DetailLog[]
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  nickname  String   @unique @db.VarChar(50)
  imageUrl  String?  @db.VarChar(256) // can be removed later
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
}

model UserCode {
  id          Int          @id @default(autoincrement())
  code        String       @db.Char(6)
  type        UserCodeType
  expiredAt   DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  confirmedAt DateTime?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

enum UserCodeType {
  SIGN_UP
  CHANGE_PASSWORD
}

model UserCharacter {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int           @unique
  characterType CharacterType
  level         Int           @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum CharacterType {
  BROCCOLI
  CARROT
  GREEN_ONION
}

model Log {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(20)
  description String?        @db.VarChar(300)
  kick        String?        @db.VarChar(20)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  images      Image[]
  scrapUsers  UserScrapLog[]
  goodUsers   UserGoodLog[]
}

model Image {
  id        Int         @id @default(autoincrement())
  original  String      @db.VarChar(1024)
  w_256     String      @db.VarChar(1024)
  w_1024    String      @db.VarChar(1024)
  log       Log?        @relation(fields: [logId], references: [id])
  logId     Int?
  detailLog DetailLog[]
  recipe    Recipe[]
}

model UserScrapLog {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  log         Log?       @relation(fields: [logId], references: [id], onDelete: Cascade)
  logId       Int?
  detailLog   DetailLog? @relation(fields: [detailLogId], references: [id], onDelete: Cascade)
  detailLogId Int?
  createdAt   DateTime   @default(now())

  @@index([createdAt])
}

model UserGoodLog {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  log         Log?       @relation(fields: [logId], references: [id], onDelete: Cascade)
  logId       Int?
  detailLog   DetailLog? @relation(fields: [detailLogId], references: [id], onDelete: Cascade)
  detailLogId Int?
}

model DetailLog {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(15)
  description String         @db.VarChar(20)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  image       Image          @relation(fields: [imageId], references: [id])
  imageId     Int
  recipes     Recipe[]
  ingredients String         @db.VarChar(3000)
  user        User?          @relation(fields: [userId], references: [id])
  userId      Int?
  scrapUsers  UserScrapLog[]
  goodUsers   UserGoodLog[]
}

model Recipe {
  id          Int        @id @default(autoincrement())
  description String     @db.VarChar(3000)
  image       Image      @relation(fields: [imageId], references: [id])
  imageId     Int
  DetailLog   DetailLog? @relation(fields: [detailLogId], references: [id])
  detailLogId Int?
}
