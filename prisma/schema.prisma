// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/api/server/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(256)
  password    String?       @db.Char(60) // Bcrypt hash length
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userProfile UserProfile[]
  userCode    UserCode[]
  logs        Log[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  nickname  String   @unique @db.VarChar(50)
  imageUrl  String?  @db.VarChar(256) // can be removed later
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model UserCode {
  id        Int          @id @default(autoincrement())
  code      String       @db.Char(6)
  type      UserCodeType
  expiredAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
}

enum UserCodeType {
  SIGN_UP
  CHANGE_PASSWORD
}

model Log {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String?  @db.VarChar(300)
  kick        String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  images      Image[]
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String @db.VarChar(1024)
  log   Log?   @relation(fields: [logId], references: [id])
  logId Int?
}
